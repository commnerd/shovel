<?php

namespace Tests\Feature;

use App\Models\User;
use App\Services\AI\Contracts\AITaskResponse;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ProjectCreationTitleFixTest extends TestCase
{
    use RefreshDatabase;

    public function test_project_creation_tasks_with_empty_title_uses_fallback_title()
    {
        // Set up organization structure
        $this->seed(\Database\Seeders\OrganizationSeeder::class);
        $organization = \App\Models\Organization::getDefault();
        $group = $organization->defaultGroup();

        $user = User::factory()->create([
            'organization_id' => $organization->id,
            'pending_approval' => false,
        ]);
        $user->joinGroup($group);

        // Mock AI response with no project title
        $mockResponse = AITaskResponse::success(
            tasks: [
                [
                    'title' => 'Define Business Model',
                    'description' => 'Research and determine the type of business to start',
                    'status' => 'pending',
                    'sort_order' => 1,
                ],
            ],
            projectTitle: null, // No AI-generated title
            notes: ['Generated by: cerebras'],
            summary: 'Establishing a new business venture',
            problems: [],
            suggestions: []
        );

        $this->app->bind('ai', function () use ($mockResponse) {
            return new class($mockResponse) {
                private $mockResponse;

                public function __construct($mockResponse)
                {
                    $this->mockResponse = $mockResponse;
                }

                public function generateTasks(string $projectDescription, array $schema = [], array $options = []): AITaskResponse
                {
                    return $this->mockResponse;
                }

                public function provider(string $name = null): self
                {
                    return $this;
                }

                public function driver(string $name = null): self
                {
                    return $this;
                }

                public function hasConfiguredProvider(): bool
                {
                    return true;
                }

                public function getAvailableProviders(): array
                {
                    return ['cerebras', 'openai', 'anthropic'];
                }

                public function testProvider(string $name = null): array
                {
                    return ['success' => true, 'message' => 'Mock provider test successful'];
                }
            };
        });

        $response = $this->actingAs($user)
            ->post('/dashboard/projects/create/tasks', [
                'title' => '', // Empty title
                'description' => 'I want to build a business',
                'due_date' => '',
                'group_id' => $group->id,
                'ai_provider' => 'cerebras',
                'ai_model' => 'llama-4-maverick-17b-128e-instruct',
                'project_type' => 'iterative',
                'default_iteration_length_weeks' => 2,
                'auto_create_iterations' => false,
            ]);

        $response->assertOk();
        $response->assertInertia(fn ($page) => $page
            ->component('Projects/CreateTasks')
            ->where('projectData.title', 'I want to build Project') // Should use fallback title
            ->where('projectData.description', 'I want to build a business')
            ->has('suggestedTasks', 1)
            ->where('suggestedTasks.0.title', 'Define Business Model')
            ->where('aiUsed', true)
            ->has('aiCommunication')
        );
    }

    public function test_project_creation_tasks_with_empty_title_uses_ai_generated_title()
    {
        // Set up organization structure
        $this->seed(\Database\Seeders\OrganizationSeeder::class);
        $organization = \App\Models\Organization::getDefault();
        $group = $organization->defaultGroup();

        $user = User::factory()->create([
            'organization_id' => $organization->id,
            'pending_approval' => false,
        ]);
        $user->joinGroup($group);

        // Mock AI response with project title
        $mockResponse = AITaskResponse::success(
            tasks: [
                [
                    'title' => 'Define Business Model',
                    'description' => 'Research and determine the type of business to start',
                    'status' => 'pending',
                    'sort_order' => 1,
                ],
            ],
            projectTitle: 'Business Development Project', // AI-generated title
            notes: ['Generated by: cerebras'],
            summary: 'Establishing a new business venture',
            problems: [],
            suggestions: []
        );

        $this->app->bind('ai', function () use ($mockResponse) {
            return new class($mockResponse) {
                private $mockResponse;

                public function __construct($mockResponse)
                {
                    $this->mockResponse = $mockResponse;
                }

                public function generateTasks(string $projectDescription, array $schema = [], array $options = []): AITaskResponse
                {
                    return $this->mockResponse;
                }

                public function provider(string $name = null): self
                {
                    return $this;
                }

                public function driver(string $name = null): self
                {
                    return $this;
                }

                public function hasConfiguredProvider(): bool
                {
                    return true;
                }

                public function getAvailableProviders(): array
                {
                    return ['cerebras', 'openai', 'anthropic'];
                }

                public function testProvider(string $name = null): array
                {
                    return ['success' => true, 'message' => 'Mock provider test successful'];
                }
            };
        });

        $response = $this->actingAs($user)
            ->post('/dashboard/projects/create/tasks', [
                'title' => '', // Empty title
                'description' => 'I want to build a business',
                'due_date' => '',
                'group_id' => $group->id,
                'ai_provider' => 'cerebras',
                'ai_model' => 'llama-4-maverick-17b-128e-instruct',
                'project_type' => 'iterative',
                'default_iteration_length_weeks' => 2,
                'auto_create_iterations' => false,
            ]);

        $response->assertOk();
        $response->assertInertia(fn ($page) => $page
            ->component('Projects/CreateTasks')
            ->where('projectData.title', 'Business Development Project') // Should use AI-generated title
            ->where('projectData.description', 'I want to build a business')
            ->has('suggestedTasks', 1)
            ->where('suggestedTasks.0.title', 'Define Business Model')
            ->where('aiUsed', true)
            ->has('aiCommunication')
        );
    }

    public function test_project_creation_tasks_handles_ai_failure_with_fallback_title()
    {
        $user = User::factory()->create();

        // Mock AI failure
        $failedResponse = AITaskResponse::failed('API connection failed');

        $this->mock(\App\Services\AI\AIManager::class, function ($mock) use ($failedResponse) {
            $mock->shouldReceive('generateTasks')
                ->once()
                ->andReturn($failedResponse);
        });

        $response = $this->actingAs($user)
            ->post('/dashboard/projects/create/tasks', [
                'title' => '', // Empty title
                'description' => 'I want to build a business',
                'due_date' => '',
                'group_id' => null,
                'project_type' => 'finite',
            ]);

        $response->assertOk();
        $response->assertInertia(fn ($page) => $page
            ->component('Projects/CreateTasks')
            ->where('projectData.title', 'I want to build Project') // Should use fallback title
            ->where('projectData.description', 'I want to build a business')
            ->has('suggestedTasks', 5) // Should have fallback tasks
            ->where('aiUsed', false)
            ->where('aiCommunication', null)
        );
    }

    public function test_project_creation_tasks_with_user_provided_title()
    {
        // Set up organization structure
        $this->seed(\Database\Seeders\OrganizationSeeder::class);
        $organization = \App\Models\Organization::getDefault();
        $group = $organization->defaultGroup();

        $user = User::factory()->create([
            'organization_id' => $organization->id,
            'pending_approval' => false,
        ]);
        $user->joinGroup($group);

        // Mock AI response
        $mockResponse = AITaskResponse::success(
            tasks: [
                [
                    'title' => 'Define Business Model',
                    'description' => 'Research and determine the type of business to start',
                    'status' => 'pending',
                    'sort_order' => 1,
                ],
            ],
            projectTitle: 'Business Development Project', // AI tries to provide title
            notes: ['Generated by: cerebras'],
            summary: 'Establishing a new business venture',
            problems: [],
            suggestions: []
        );

        $this->app->bind('ai', function () use ($mockResponse) {
            return new class($mockResponse) {
                private $mockResponse;

                public function __construct($mockResponse)
                {
                    $this->mockResponse = $mockResponse;
                }

                public function generateTasks(string $projectDescription, array $schema = [], array $options = []): AITaskResponse
                {
                    return $this->mockResponse;
                }

                public function provider(string $name = null): self
                {
                    return $this;
                }

                public function driver(string $name = null): self
                {
                    return $this;
                }

                public function hasConfiguredProvider(): bool
                {
                    return true;
                }

                public function getAvailableProviders(): array
                {
                    return ['cerebras', 'openai', 'anthropic'];
                }

                public function testProvider(string $name = null): array
                {
                    return ['success' => true, 'message' => 'Mock provider test successful'];
                }
            };
        });

        $response = $this->actingAs($user)
            ->post('/dashboard/projects/create/tasks', [
                'title' => 'My Custom Project Title', // User-provided title
                'description' => 'I want to build a business',
                'due_date' => '',
                'group_id' => $group->id,
                'ai_provider' => 'cerebras',
                'ai_model' => 'llama-4-maverick-17b-128e-instruct',
                'project_type' => 'iterative',
                'default_iteration_length_weeks' => 2,
                'auto_create_iterations' => false,
            ]);

        $response->assertOk();
        $response->assertInertia(fn ($page) => $page
            ->component('Projects/CreateTasks')
            ->where('projectData.title', 'My Custom Project Title') // Should use user-provided title
            ->where('projectData.description', 'I want to build a business')
            ->has('suggestedTasks', 1)
            ->where('suggestedTasks.0.title', 'Define Business Model')
            ->where('aiUsed', true)
            ->has('aiCommunication')
        );
    }
}
