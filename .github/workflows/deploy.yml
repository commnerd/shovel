name: Deploy to Production

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

env:
  DOCKER_IMAGE: commnerd/foca
  DOCKER_TAG: latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      git-tag: ${{ steps.tag.outputs.name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get git tag
      id: tag
      run: |
        echo "name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          # Login to Docker Hub
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

          # Pull the image with git tag
          docker pull ${{ env.DOCKER_IMAGE }}:${{ needs.build-and-push.outputs.git-tag }}

          # Stop and remove existing container if it exists
          docker stop foca-app 2>/dev/null || true
          docker rm foca-app 2>/dev/null || true

          # Run the new container
          docker run -d \
            --network web \
            --name foca-app \
            --restart unless-stopped \
            --volume /home/admin/docker/foca-app/database.sqlite:/var/www/html/database/database.sqlite \
            --env CEREBRUS_API_KEY=${{ secrets.CEREBRUS_API_KEY }} \
            ${{ env.DOCKER_IMAGE }}:${{ needs.build-and-push.outputs.git-tag }}

          # Wait for container to be ready
          sleep 10

          # Run database migrations
          docker exec foca-app php artisan migrate --force

          # Clean up old garbage
          docker system prune --all --force
